1、JavaScript 的变量命名有两个限制：
变量名称必须仅包含字母，数字，符号 $ 和 _。
首字符必须非数字。
2、let — 现代的变量声明方式。
var — 老旧的变量声明方式。一般情况下，我们不会再使用它。但是，我们会在 旧时的 "var" 章节介绍 var 和 let 的微妙差别，以防你需要它们。
const — 类似于 let，但是变量的值无法被修改。
3、取余 %和求幂 **（求幂运算 a ** b 是 a 乘以自身 b 次。）
   运算元 —— 运算符应用的对象
   加号 + 被应用于字符串，它将合并（连接）各个字符串。注意:只要任意一个运算元是字符串，那么另一个运算元也将被转化为字符串
   二元 + 是唯一一个以这种方式支持字符串的运算符。其他算术运算符只对数字起作用，并且总是将其运算元转换为数字。例如：alert(2 + 2 + '1' ); // "41"，不是 "221"
   一元运算符加号，或者说，加号 + 应用于单个值，对数字没有任何作用。但是如果运算元不是数字，加号 + 则会将其转化为数字
   null 经过数字转换之后会变为 0。
   undefined 经过数字转换之后会变为 NaN
运算符优先级:
每个运算符都有对应的优先级数字。数字越大，越先执行。如果优先级相同，则按照由左至右的顺序执行。
17  一元加号	+
17	一元负号	-
16	求幂 	**
15	乘号	*
15	除号	/
13	加号	+
13	减号	-
…	…	…
3	赋值符
4、赋值 = 返回一个值（语句 x = value 将值 value 写入 x 然后返回 x）
5、原地修改：经常需要对一个变量做运算，并将新的结果存储在同一个变量中
let n = 2;
n += 5; // 现在 n = 7（等同于 n = n + 5）
n *= 2; // 现在 n = 14（等同于 n = n * 2）
alert( n ); // 14
6、+= 、*=、/= 和 -=这类运算符的优先级与普通赋值运算符的优先级相同，所以它们在大多数其他运算之后执行
7、自增 ++ 将变量与 1 相加
   自减 -- 将变量与 1 相减
   自增/自减只能应用于变量。试一下，将其应用于数值（比如 5++）则会报错，运算符 ++ 和 -- 可以置于变量前，也可以置于变量后
   （区别：所有的运算符都有返回值。自增/自减也不例外。前置形式返回一个新的值，但后置返回原来的值（做加法/减法之前的值））
   总结：1、如果自增/自减的值不会被使用，那么两者形式没有区别
         2、如果我们想要对变量进行自增操作，并且 需要立刻使用自增后的值，那么我们需要使用前置形式
         3、如果我们想要将一个数加一，但是我们想使用其自增之前的值，那么我们需要使用后置形式
8、逗号运算符能让我们处理多个语句，使用 , 将它们分开。每个语句都运行了，但是只有最后的语句的结果会被返回。注意：逗号运算符的优先级非常低，比 = 还要低
9、prompt 以字符串的形式返回用户的输入
10、值的比较
    1、所有比较运算符均返回布尔值
    2、比较的结果可以被赋值给任意变量
    3、字符串的比较算法非常简单：
首先比较两个字符串的首位字符大小。
如果一方字符较大（或较小），则该字符串大于（或小于）另一个字符串。算法结束。
否则，如果两个字符串的首位字符相等，则继续取出两个字符串各自的后一位字符进行比较。
重复上述步骤进行比较，直到比较完成某字符串的所有字符为止。
如果两个字符串的字符同时用完，那么则判定它们相等，否则未结束（还有未比较的字符）的字符串更大。
大写的 "A" 并不等于小写的 "a"
    4、当对不同类型的值进行比较时，JavaScript 会首先将其转化为数字（number）再判定大小
       对于布尔类型值，true 会被转化为 1、false 转化为 0
    5、普通的相等性检查 == 存在一个问题，它不能区分出 0 和 false，也同样无法区分空字符串和 false
       严格相等运算符 === 在进行比较时不会做任何的类型转换
       “严格不相等”表示为 !==
       当使用数学式或其他比较方法 < > <= >= 时，null/undefined 会被转化为数字：null 被转化为 0，undefined 被转化为 NaN
总结： 
比较运算符始终返回布尔值。
字符串的比较，会按照“词典”顺序逐字符地比较大小。
当对不同类型的值进行比较时，它们会先被转化为数字（不包括严格相等检查）再进行比较。
在非严格相等 == 下，null 和 undefined 相等且各自不等于任何其他的值。
在使用 > 或 < 进行比较时，需要注意变量可能为 null/undefined 的情况。比较好的方法是单独检查变量是否等于 null/undefined。
    
    
    
    
    
    
    
    
   
